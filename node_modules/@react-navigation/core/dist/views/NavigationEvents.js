'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _withNavigation = require('./withNavigation');

var _withNavigation2 = _interopRequireDefault(_withNavigation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventNameToPropName = {
  willFocus: 'onWillFocus',
  didFocus: 'onDidFocus',
  willBlur: 'onWillBlur',
  didBlur: 'onDidBlur'
};

var EventNames = Object.keys(EventNameToPropName);

class NavigationEvents extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.addListener = eventName => {
      var listener = this.props[EventNameToPropName[eventName]];
      if (listener) {
        this.subscriptions[eventName] = this.props.navigation.addListener(eventName, listener);
      }
    }, this.removeListener = eventName => {
      if (this.subscriptions[eventName]) {
        this.subscriptions[eventName].remove();
        this.subscriptions[eventName] = undefined;
      }
    }, _temp;
  }

  componentDidMount() {
    this.subscriptions = {};
    EventNames.forEach(this.addListener);
  }

  componentDidUpdate(prevProps) {
    EventNames.forEach(eventName => {
      var listenerHasChanged = this.props[EventNameToPropName[eventName]] !== prevProps[EventNameToPropName[eventName]];
      if (listenerHasChanged) {
        this.removeListener(eventName);
        this.addListener(eventName);
      }
    });
  }

  componentWillUnmount() {
    EventNames.forEach(this.removeListener);
  }

  render() {
    return null;
  }
}

exports.default = (0, _withNavigation2.default)(NavigationEvents);